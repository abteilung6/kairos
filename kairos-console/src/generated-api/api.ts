/* tslint:disable */
/* eslint-disable */
/**
 * Kairos API
 * This specification descibes the Kairos API.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ObjectStore
 */
export interface ObjectStore {
    /**
     * 
     * @type {string}
     * @memberof ObjectStore
     */
    'object_key': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectStore
     */
    'claimed_time': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectStore
     */
    'occupied_time': string | null;
    /**
     * 
     * @type {string}
     * @memberof ObjectStore
     */
    'bucket_get_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof ObjectStore
     */
    'id': string;
    /**
     * 
     * @type {ObjectStoreState}
     * @memberof ObjectStore
     */
    'state': ObjectStoreState;
}


/**
 * 
 * @export
 * @interface ObjectStoreCreateRequest
 */
export interface ObjectStoreCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ObjectStoreCreateRequest
     */
    'file_name': string;
}
/**
 * 
 * @export
 * @interface ObjectStoreCreateResponse
 */
export interface ObjectStoreCreateResponse {
    /**
     * 
     * @type {string}
     * @memberof ObjectStoreCreateResponse
     */
    'object_key': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectStoreCreateResponse
     */
    'claimed_time': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectStoreCreateResponse
     */
    'occupied_time': string | null;
    /**
     * 
     * @type {string}
     * @memberof ObjectStoreCreateResponse
     */
    'bucket_get_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof ObjectStoreCreateResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ObjectStoreCreateResponse
     */
    'bucket_post_url': string | null;
    /**
     * 
     * @type {PresignedFields}
     * @memberof ObjectStoreCreateResponse
     */
    'fields': PresignedFields;
    /**
     * 
     * @type {ObjectStoreState}
     * @memberof ObjectStoreCreateResponse
     */
    'state': ObjectStoreState;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ObjectStoreState = {
    Claimed: 'claimed',
    Occupied: 'occupied'
} as const;

export type ObjectStoreState = typeof ObjectStoreState[keyof typeof ObjectStoreState];


/**
 * 
 * @export
 * @interface ObjectStoreUpdateRequest
 */
export interface ObjectStoreUpdateRequest {
    /**
     * 
     * @type {ObjectStoreState}
     * @memberof ObjectStoreUpdateRequest
     */
    'state': ObjectStoreState;
}


/**
 * 
 * @export
 * @interface PresignedFields
 */
export interface PresignedFields {
    /**
     * 
     * @type {string}
     * @memberof PresignedFields
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof PresignedFields
     */
    'AWSAccessKeyId': string;
    /**
     * 
     * @type {string}
     * @memberof PresignedFields
     */
    'policy': string;
    /**
     * 
     * @type {string}
     * @memberof PresignedFields
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * ObjectStoresApi - axios parameter creator
 * @export
 */
export const ObjectStoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a presigned url in order to upload your file to object store.
         * @summary Generate a presigned url for object storage.
         * @param {ObjectStoreCreateRequest} objectStoreCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectStoreCreateObjectStorePost: async (objectStoreCreateRequest: ObjectStoreCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectStoreCreateRequest' is not null or undefined
            assertParamExists('objectStoreCreateObjectStorePost', 'objectStoreCreateRequest', objectStoreCreateRequest)
            const localVarPath = `/object-store/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(objectStoreCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update object store
         * @param {string} objectStoreId 
         * @param {ObjectStoreUpdateRequest} objectStoreUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectStoreUpdateObjectStoreObjectStoreIdPatch: async (objectStoreId: string, objectStoreUpdateRequest: ObjectStoreUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectStoreId' is not null or undefined
            assertParamExists('objectStoreUpdateObjectStoreObjectStoreIdPatch', 'objectStoreId', objectStoreId)
            // verify required parameter 'objectStoreUpdateRequest' is not null or undefined
            assertParamExists('objectStoreUpdateObjectStoreObjectStoreIdPatch', 'objectStoreUpdateRequest', objectStoreUpdateRequest)
            const localVarPath = `/object-store/{object_store_id}`
                .replace(`{${"object_store_id"}}`, encodeURIComponent(String(objectStoreId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(objectStoreUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectStoresApi - functional programming interface
 * @export
 */
export const ObjectStoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectStoresApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a presigned url in order to upload your file to object store.
         * @summary Generate a presigned url for object storage.
         * @param {ObjectStoreCreateRequest} objectStoreCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectStoreCreateObjectStorePost(objectStoreCreateRequest: ObjectStoreCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectStoreCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectStoreCreateObjectStorePost(objectStoreCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectStoresApi.objectStoreCreateObjectStorePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update object store
         * @param {string} objectStoreId 
         * @param {ObjectStoreUpdateRequest} objectStoreUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectStoreUpdateObjectStoreObjectStoreIdPatch(objectStoreId: string, objectStoreUpdateRequest: ObjectStoreUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectStore>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectStoreUpdateObjectStoreObjectStoreIdPatch(objectStoreId, objectStoreUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObjectStoresApi.objectStoreUpdateObjectStoreObjectStoreIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObjectStoresApi - factory interface
 * @export
 */
export const ObjectStoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectStoresApiFp(configuration)
    return {
        /**
         * Generate a presigned url in order to upload your file to object store.
         * @summary Generate a presigned url for object storage.
         * @param {ObjectStoreCreateRequest} objectStoreCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectStoreCreateObjectStorePost(objectStoreCreateRequest: ObjectStoreCreateRequest, options?: any): AxiosPromise<ObjectStoreCreateResponse> {
            return localVarFp.objectStoreCreateObjectStorePost(objectStoreCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update object store
         * @param {string} objectStoreId 
         * @param {ObjectStoreUpdateRequest} objectStoreUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectStoreUpdateObjectStoreObjectStoreIdPatch(objectStoreId: string, objectStoreUpdateRequest: ObjectStoreUpdateRequest, options?: any): AxiosPromise<ObjectStore> {
            return localVarFp.objectStoreUpdateObjectStoreObjectStoreIdPatch(objectStoreId, objectStoreUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectStoresApi - interface
 * @export
 * @interface ObjectStoresApi
 */
export interface ObjectStoresApiInterface {
    /**
     * Generate a presigned url in order to upload your file to object store.
     * @summary Generate a presigned url for object storage.
     * @param {ObjectStoreCreateRequest} objectStoreCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectStoresApiInterface
     */
    objectStoreCreateObjectStorePost(objectStoreCreateRequest: ObjectStoreCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ObjectStoreCreateResponse>;

    /**
     * 
     * @summary Update object store
     * @param {string} objectStoreId 
     * @param {ObjectStoreUpdateRequest} objectStoreUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectStoresApiInterface
     */
    objectStoreUpdateObjectStoreObjectStoreIdPatch(objectStoreId: string, objectStoreUpdateRequest: ObjectStoreUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ObjectStore>;

}

/**
 * ObjectStoresApi - object-oriented interface
 * @export
 * @class ObjectStoresApi
 * @extends {BaseAPI}
 */
export class ObjectStoresApi extends BaseAPI implements ObjectStoresApiInterface {
    /**
     * Generate a presigned url in order to upload your file to object store.
     * @summary Generate a presigned url for object storage.
     * @param {ObjectStoreCreateRequest} objectStoreCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectStoresApi
     */
    public objectStoreCreateObjectStorePost(objectStoreCreateRequest: ObjectStoreCreateRequest, options?: RawAxiosRequestConfig) {
        return ObjectStoresApiFp(this.configuration).objectStoreCreateObjectStorePost(objectStoreCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update object store
     * @param {string} objectStoreId 
     * @param {ObjectStoreUpdateRequest} objectStoreUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectStoresApi
     */
    public objectStoreUpdateObjectStoreObjectStoreIdPatch(objectStoreId: string, objectStoreUpdateRequest: ObjectStoreUpdateRequest, options?: RawAxiosRequestConfig) {
        return ObjectStoresApiFp(this.configuration).objectStoreUpdateObjectStoreObjectStoreIdPatch(objectStoreId, objectStoreUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



